import discord
import json
import urllib.parse

# Dictionary mapping Pokémon names to their corresponding links
with open('guides.json', 'r', encoding='utf-8') as f:
    pokemon_links = json.loads(f.read())

# Response for the !squad command
squad_info = """
Hi there! Here is information about our squads. We currently have two.

Squad name: **Sector**
Squad ID: **#Y7Q2NH5Q**
Leader: **Cyber**

Squad Name: **Sector・B**
Squad ID: **#NK1EE0P6**
Leader: **Hikari**

Please send a request & message the squad leader to join.
"""

# Response for the !hephe command
hephe = """
Don't forget to claim your squad points!
"""

# Define your intents
intents = discord.Intents.default()
intents.message_content = True

# Initialize Discord client with intents
client = discord.Client(intents=intents)

_COMMANDS = {}
_CMD_INFO = {}


def bot_command(cmd_name, description = ""):
    def cmd_wrapper(f):
        _cmd = cmd_name.lower()
        _COMMANDS[_cmd] = f
        # TODO: get params for generating usage
        usage = ""
        if f.__code__.co_argcount > 1:
            usage = ' '.join(f"<{_}>" for _ in f.__code__.co_varnames[1:f.__code__.co_argcount] if _)
            usage = f"`!{_cmd} {usage}`"
        else:
            usage = f"`!{_cmd}`"
        _CMD_INFO[_cmd] = (description, usage)
        return f

    return cmd_wrapper


@bot_command("help", "General info about the bot and commands.")
async def cmd_help(message, *args):
    embed = discord.Embed(title="Helpful Information", color=0xBA8EBF)
    embed.description = "Hi there! See the list of bot commands you can use:"

    for cmd, info in _CMD_INFO.items():
        desc = f'**Usage**: {info[1]}'
        if info[0]:
            desc += '\n' + info[0]
        embed.add_field(name=f'!{cmd}', value=desc, inline=False)

    embed.set_footer(text = "More commands coming soon!")
    await message.channel.send(embed=embed)
    return True


@bot_command("guide", "I will bring up a guide for a Pokémon you want.")
async def cmd_guide(message, pokemon_name=None):
    if pokemon_name:
        pokemon_name = pokemon_name.lower()
        # Check if the Pokémon name is in the dictionary
        if pokemon_name in pokemon_links:
            # Send the corresponding link along with a message
            _ = pokemon_links[pokemon_name]
            await message.channel.send(f"Here is a guide for {_['name']}. I hope you find it helpful!\n{_['url']}")
        else:
            # If the Pokémon name is not found, send a message indicating so
            await message.channel.send("Sorry, I couldn't find a guide for that Pokémon.")
        return True
    return False


@bot_command("squad", "Information & squad IDs for our squads.")
async def cmd_squad(message, *args):
    embed = discord.Embed(title="Squad Information", description=squad_info, color=0xBA8EBF)
    await message.channel.send(embed=embed)
    return True

@bot_command("hephe", "Hephe once said...")
async def cmd_hephe(message, *args):
    embed = discord.Embed(title="Hephe once said...", description=hephe, color=0xBA8EBF)
    imageurl = 'https://media.discordapp.net/attachments/1007740505616035921/1207084987849904158/IMG_1628.png?ex=662e1f3f&is=662ccdbf&hm=4dfa76977f203b52954e29c7bd3f1dd4c87a1c86c1de523ac013792a3a001d1b&=&format=webp&quality=lossless&width=2110&height=956'
    embed.set_image(url=imageurl)
    await message.channel.send(embed=embed)
    return True


@bot_command("api", "I will bring up information for any Player you want")
async def cmd_api(message, player_name=None):
    if player_name and len(player_name) <= 16:
        p = urllib.parse.quote(player_name)
        await message.channel.send(f"https://uniteapi.dev/p/{p}")
        return True
    return False


@client.event
async def on_ready():
    print('Logged in as {0.user}'.format(client))
    # Get the #general channel
    general_channel = discord.utils.get(client.get_all_channels(), name='general')
    if general_channel:
        await general_channel.send("I am back online! Try one of my commands!")


@client.event
async def on_message(message):
    if message.author == client.user:
        return

    if not message.content.startswith('!'):
        return

    cmd, *cont = message.content.split(' ', 1)
    cmd = cmd[1:].lower()
    if cmd in _COMMANDS:
        succ = await _COMMANDS[cmd](message, *cont)
        if not succ:
            info = _CMD_INFO[cmd]
            await message.channel.send(f"Usage: {info[1]}")


# Run the bot with its token
client.run('TOKEN')







